import telebot
from telebot import types
from datetime import datetime
from db_bot_funcs import *
# import schedule

bot = telebot.TeleBot('6491551409:AAEprVBKNaPqKEfIt33vCipdGCGn_aOCbQI')

# –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–¥
valid_users = []
admins = []
cookers = []


def update_users():
    global valid_users, cookers, admins

    cnx = get_connection()
    valid_users = get_all_users_id_as_list(cnx, 'users')
    cookers = get_all_users_id_as_list(cnx, 'users', 'cook')
    cookers.append(589562037)
    admins = get_all_users_id_as_list(cnx, 'users', 'admin')


update_users()

# –•—Ä–∞–Ω—è—Ç—Å—è –∑–∞–∫–∞–∑—ã –≤ –≤–∏–¥–µ:
# {user_id1: {dish1: num1, ...}, user_id2: {dish4: num3, ...}, ...}
all_orders = {}

# –•—Ä–∞–Ω—è—Ç—Å—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤
# {user_id1: total1, user_id2: total2,...}
totals = {}

# –•—Ä—è–Ω—è—Ç—Å—è —Ç–∞–π–º–∏–Ω–≥–∏, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞–ª
# {user_id1: (date, time), ...}
order_timings = {}

# –ú–µ–Ω—é –≤ –≤–∏–¥–µ
# {category1: {dish1: price1, dish2: price2, ...}, ...}
menu = {}

# –í—Å–µ –±–ª—é–¥–∞ –ø–æ–¥—Ä—è–¥: {dish1: price1, dish2: price2, ...}
dishPrices = {}

# –°–æ—Å—Ç–∞–≤ –∏ –≥—Ä–∞–º–º–æ–≤–∫–∏ –±–ª—é–¥
# {dish1: [—Å–æ—Å—Ç–∞–≤, –≥—Ä–∞–º–º–æ–≤–∫–∞]}
dish_info = {}

weekdays_list = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞',
                 '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']


def day_of_week(date_str):
    global weekdays_list
    return weekdays_list[datetime.strptime(date_str, "%d.%m.%Y").weekday()]


with open('menu.txt', 'r', encoding='utf-8') as menu_file:
    lines = menu_file.readlines()
    menu_date = f'{lines[0][:-1]} {day_of_week(lines[0][:-1])}'
    category = ''
    for line in lines[1:]:
        line = line.strip()
        if line.startswith('[') and line.endswith(']'):
            category = line[1:-1]
            if category == '–°—É–ø—ã':
                category = 'üçú ' + category
            elif category == '–í—Ç–æ—Ä–æ–µ':
                category = 'üçõ ' + category
            elif category == '–°–∞–ª–∞—Ç—ã':
                category = 'ü•ó ' + category
            elif category == '–ù–∞–ø–∏—Ç–∫–∏':
                category = '‚òï ' + category
            menu[category] = {}
        elif line.startswith('–°–æ—Å—Ç–∞–≤;'):
            dish_info[dish_name].append(line[line.index(';') + 1:])
        else:
            if len(line.split(';')) == 3:
                dish_name, dish_mass, dish_price = line.split(';')
                dish_info.update({dish_name: [dish_mass, ]})
            elif len(line.split(';')) == 2:
                dish_name, dish_price = line.split(';')
                dish_info.update({dish_name: []})
            menu[category].update({dish_name: float(dish_price)})
menu_file.close()

dishes = list(menu.values())
for i in dishes:
    dishPrices.update(i)


def create_menu(message_text=None, user_id=None):
    back_btn = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥Ô∏è')
    confirm_btn = types.KeyboardButton(text='‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    remove_btn = types.KeyboardButton(text='‚ùå –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è')
    clear_btn = types.KeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ')

    if message_text is None and user_id is None:  # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        markup.add(types.KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é'))
        btn_arr = []
        for m in menu:
            btn_arr.append(types.KeyboardButton(text=f'{m}'))
        markup.row(*btn_arr)
        markup.row(confirm_btn, remove_btn, clear_btn)
        return markup
    elif message_text is not None:  # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for dish, price in menu[message_text].items():
            markup.add(types.KeyboardButton(text=f'{dish}: {price}'))

        markup.add(back_btn)
        return markup
    else:  # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        btn_arr = []
        for dish, num in all_orders[user_id].items():
            btn_arr.append(types.KeyboardButton(text=f'{dish}    x{num}'))
        markup.add(*btn_arr)
        markup.add(back_btn)
        return markup


# –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∑–∞–∫–∞–∑–æ–º
def create_order_msg(message):
    global all_orders, totals, dishPrices

    msg = '–í–∞—à –∑–∞–∫–∞–∑:\n'
    total_price = 0
    for dish, num in all_orders[message.from_user.id].items():
        price = dishPrices[dish]
        msg += f'{dish} -- {price}p.  x{num}\n'
        total_price += price * num
        total_price = round(total_price, 2)
    msg += f'\n–ò—Ç–æ–≥–æ: {total_price}p.'
    totals.update({message.from_user.id: total_price})
    return msg


# –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –≤ —Ñ–∞–π–ª
def create_orders_file():
    global all_orders, totals, order_timings

    f = open('orders.txt', 'w', encoding='utf-8')
    for user in all_orders:
        (order_date,order_time) = order_timings[user]
        f.write(f'–ó–∞–∫–∞–∑ {order_date} {order_time}; {user}\n')
        for dish, num in all_orders[user].items():
            f.write(f'{dish};{num};{dishPrices[dish]}\n')
        f.write(f'–ò—Ç–æ–≥–æ: {totals[user]}')
        f.write('\n_______________\n\n')
    f.close()


# –§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
def create_message_menu():
    global menu, dish_info, dishPrices, menu_date

    msg = f'–ú–µ–Ω—é –Ω–∞ {menu_date}:'
    msg += '\n'
    for categ in menu:
        msg += f'\n*{categ}*\n'
        for dish, price in menu[categ].items():
            msg += f'{dish} -- {price}\n'
            info = ''
            for s in dish_info[dish]:
                info += f'{s}; '
            if info != '':
                msg += f'{info}\n'
    return msg


# –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def unknown_user(id):
    global bot
    bot.send_message(id, '–£–ø—Å, –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    msg = '–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è?\n–ù–∞–∂–º–∏—Ç–µ "–î–∞", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π' \
          ' id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–î–∞'))
    markup.add(types.KeyboardButton(text='–ù–µ—Ç'))
    bot.send_message(id, msg, reply_markup=markup)


@bot.message_handler(commands=['start'])
def start(message):
    # if message.chat.type == 'private':
    #     bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '
    #                                       f'{message.from_user.first_name}',
    #                      reply_markup=create_menu())
    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–¥
    if message.chat.id in valid_users:
        bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '
                                          f'{message.from_user.first_name}',
                         reply_markup=create_menu())
    else:
        unknown_user(message.chat.id)
        # bot.send_message(message.chat.id, '–£–ø—Å, –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        # msg = '–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è?\n–ù–∞–∂–º–∏—Ç–µ "–î–∞", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π' \
        #       ' id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
        # markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
        # markup.add(types.KeyboardButton(text='–î–∞'))
        # markup.add(types.KeyboardButton(text='–ù–µ—Ç'))
        #
        # bot.send_message(message.chat.id, msg, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def bot_message(message):
    global menu, all_orders, totals, dishPrices, valid_users, admins, \
        cookers, menu_date

    update_users()

    if message.chat.id in valid_users:
        if message.text in menu:
            bot.send_message(message.chat.id, message.text,
                             reply_markup=create_menu(
                                 message_text=message.text))

        elif message.text == '‚óÄ –ù–∞–∑–∞–¥Ô∏è' or message.text == '–ì–æ—Ç–æ–≤–æ':
            bot.send_message(message.chat.id, message.text,
                             reply_markup=create_menu())

        elif message.text.split(':')[0].strip() in dishPrices:
            dish = message.text.split(':')[0].strip()
            if message.from_user.id in all_orders:
                if dish in all_orders[message.from_user.id]:
                    all_orders[message.from_user.id][dish] += 1
                else:
                    all_orders[message.from_user.id].update({dish: 1})
            else:
                all_orders.update({message.from_user.id: {dish: 1}})
            bot.send_message(message.chat.id, f'{dish} –¥–æ–±–∞–≤–ª–µ–Ω')
            bot.send_message(message.chat.id, create_order_msg(message))

        elif message.text.split('x')[0].strip() in dishPrices:
            dish = message.text.split('x')[0].strip()
            all_orders[message.from_user.id][dish] -= 1

            if all_orders[message.from_user.id][dish] == 0:
                del all_orders[message.from_user.id][dish]

            if all_orders[message.from_user.id] == {}:
                del all_orders[message.from_user.id]
                del totals[message.from_user.id]
                bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ –ø—É—Å—Ç',
                                 reply_markup=create_menu())
            else:
                bot.send_message(message.chat.id, f'1 {dish} —É–¥–∞–ª–µ–Ω',
                                 reply_markup=create_menu(
                                     user_id=message.from_user.id))
                bot.send_message(message.chat.id, create_order_msg(message))

        elif message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ':
            del all_orders[message.from_user.id]
            del totals[message.from_user.id]
            create_orders_file()
            bot.send_message(message.chat.id, '–û—á–∏—â–µ–Ω–æ!')

        elif message.text == '‚ùå –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è':
            bot.send_message(message.chat.id, '–£–¥–∞–ª–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ',
                             reply_markup=create_menu(
                                 user_id=message.from_user.id))

        elif message.text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
            if message.from_user.id in all_orders:
                order_time = datetime.today().time().isoformat(
                    timespec='seconds')
                order_date = datetime.today().date().isoformat()
                order_date = datetime.strptime(order_date, '%Y-%m-%d').strftime('%Y.%m.%d')
                order_timings.update({message.from_user.id: (order_date, order_time)})
                create_orders_file()
                bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')
            else:
                bot.send_message(message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç')

        elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
            bot.send_message(message.chat.id, create_message_menu(), parse_mode='Markdown')

        else:
            bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫')

    else:
        if message.text == '–î–∞':
            msg = f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n' \
                  f'Name: {message.from_user.first_name} {message.from_user.last_name}\n' \
                  f'Username: {message.from_user.username}\n' \
                  f'id: {message.from_user.id}'
            bot.send_message(admins[0], msg)
            msg = '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton(text='–ì–æ—Ç–æ–≤–æ'))
            markup.add(types.KeyboardButton(text='–ì–æ—Ç–æ–≤–æ'))
            bot.send_message(message.chat.id, msg, reply_markup=markup)
        elif message.text == '–ì–æ—Ç–æ–≤–æ':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(types.KeyboardButton(text='–ì–æ—Ç–æ–≤–æ'))
            markup.add(types.KeyboardButton(text='–ì–æ—Ç–æ–≤–æ'))
            bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', reply_markup=markup)
        else:
            unknown_user(message.chat.id)


