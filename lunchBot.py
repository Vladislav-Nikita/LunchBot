import telebot
from telebot import types
from datetime import datetime
from db_bot_funcs import *
from ast import literal_eval
# from main import send_time

bot = telebot.TeleBot('6491551409:AAEprVBKNaPqKEfIt33vCipdGCGn_aOCbQI')

us_tab_nam = users_table_name
# –ü–æ–ª—É—á–∞–µ–º –∏–∑ –±–¥
valid_users = []
user_nicknames = {}
admins = []
cooks = []
admin_pass = 'oaq873ergf'
cook_pass = 'zRgcu*T{zB'

send_time = '19:24'


def update_users():
    global valid_users, cooks, admins, user_nicknames, us_tab_nam

    cnx = get_connection()
    valid_users = get_all_users_id_as_list(cnx, us_tab_nam)
    cooks = get_all_users_id_as_list(cnx, us_tab_nam, 'cook')
    # cooks.append(589562037)
    admins = get_all_users_id_as_list(cnx, us_tab_nam, 'admin')
    user_nicknames = get_all_users_nicknames_as_dict(cnx)


update_users()

# –•—Ä–∞–Ω—è—Ç—Å—è –∑–∞–∫–∞–∑—ã –≤ –≤–∏–¥–µ:
# {user_id1: {dish1: num1, ...}, user_id2: {dish4: num3, ...}, ...}
all_orders = {}

# –•—Ä–∞–Ω—è—Ç—Å—è —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤
# {user_id1: total1, user_id2: total2,...}
totals = {}

# –•—Ä—è–Ω—è—Ç—Å—è —Ç–∞–π–º–∏–Ω–≥–∏, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫–∞–∑–∞–ª
# {user_id1: (date, time), ...}
order_timings = {}

# –ú–µ–Ω—é –≤ –≤–∏–¥–µ
# {category1: {dish1: price1, dish2: price2, ...}, ...}
menu = {}
menu_date = ''
menu_date_obj = datetime.today()

# –í—Å–µ –±–ª—é–¥–∞ –ø–æ–¥—Ä—è–¥: {dish1: price1, dish2: price2, ...}
dish_prices = {}

# –°–æ—Å—Ç–∞–≤ –∏ –≥—Ä–∞–º–º–æ–≤–∫–∏ –±–ª—é–¥
# {dish1: [—Å–æ—Å—Ç–∞–≤, –≥—Ä–∞–º–º–æ–≤–∫–∞]}
dish_info = {}

weekdays_list = ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞',
                 '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']


def day_of_week(date_str):
    global weekdays_list
    return weekdays_list[datetime.strptime(date_str, "%d.%m.%Y").weekday()]


def init_menu():
    global menu, dish_prices, menu_date, menu_date_obj, dish_info, all_orders, \
        totals, order_timings

    try:
        menu, dish_prices, menu_date, menu_date_obj, dish_info = {}, {}, '', None, {}

        all_orders, totals, order_timings = {}, {}, {}

        with open('menu.txt', 'r', encoding='utf-8') as menu_file:
            lines = menu_file.readlines()
            menu_date = f'{lines[0][:-1]} {day_of_week(lines[0][:-1])}'
            menu_date_obj = datetime.strptime(lines[0][:-1], "%d.%m.%Y")
            category = ''
            for line in lines[1:]:
                line = line.strip()
                if line.startswith('[') and line.endswith(']'):
                    category = line[1:-1]
                    if category == '–°—É–ø—ã':
                        category = 'üçú ' + category
                    elif category == '–í—Ç–æ—Ä–æ–µ':
                        category = 'üçõ ' + category
                    elif category == '–°–∞–ª–∞—Ç—ã':
                        category = 'ü•ó ' + category
                    elif category == '–ù–∞–ø–∏—Ç–∫–∏':
                        category = '‚òï ' + category
                    menu.update({category: {}})
                    # menu[category] = {}
                elif line.startswith('–û–ø–∏—Å–∞–Ω–∏–µ;'):
                    dish_info.update({dish_name: line[line.index(';') + 1:]})
                    # dish_info[dish_name].append(line[line.index(';') + 1:])
                else:
                    dish_name, dish_price = line.split(';')
                    menu[category].update({dish_name: float(dish_price)})
        menu_file.close()
        for i in list(menu.values()):
            dish_prices.update(i)
    except Exception as e:
        bot.send_message(admins[0], f"init_menu doesn't works\n{e}")


init_menu()


# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
def create_buttons(message_text=None, user_id=None):
    back_btn = types.KeyboardButton('‚óÄ –ù–∞–∑–∞–¥Ô∏è')
    confirm_btn = types.KeyboardButton(text='‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑')
    remove_btn = types.KeyboardButton(text='‚ùå –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è')
    clear_btn = types.KeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ')

    if message_text is None and user_id is None:  # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        markup.add(types.KeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é'))
        btn_arr = []
        for m in menu:
            btn_arr.append(types.KeyboardButton(text=f'{m}'))
        markup.add(*btn_arr)
        markup.row(confirm_btn, remove_btn, clear_btn)
        return markup
    elif message_text is not None:  # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—Ç–æ—Ä–æ–≥–æ —É—Ä–æ–≤–Ω—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for dish, price in menu[message_text].items():
            markup.add(types.KeyboardButton(text=f'{dish}: {price}'))

        markup.add(back_btn)
        return markup
    else:  # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤ —Ä–µ–∂–∏–º–µ —É–¥–∞–ª–µ–Ω–∏—è
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn_arr = []
        for dish, num in all_orders[user_id].items():
            btn_arr.append(types.KeyboardButton(text=f'{dish}    x{num}'))
        markup.add(*btn_arr)
        markup.add(back_btn)
        return markup


# –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –∑–∞–∫–∞–∑–æ–º
def create_order_msg(message):
    global all_orders, totals, dish_prices

    msg = '–í–∞—à –∑–∞–∫–∞–∑:\n'
    total_price = 0
    for dish, num in all_orders[message.chat.id].items():
        price = dish_prices[dish]
        msg += f'{dish} -- {price}p.  x{num}\n'
        total_price += price * num
        total_price = round(total_price, 2)
    msg += f'\n–ò—Ç–æ–≥–æ: {total_price}p.'
    totals.update({message.chat.id: total_price})
    return msg


# —á–∏—Ç–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
def get_orders_vars_from_sys():
    try:
        f = open('sys_orders.txt', 'r', encoding='utf-8')
        lines = f.readlines()
        for line in lines:
            if line.startswith('All orders'):
                sys_orders = literal_eval(line[line.index(':') + 1:].strip())
            elif line.startswith('Order timings'):
                sys_order_timings = literal_eval(line[line.index(':') + 1:].strip())
            elif line.startswith('Totals'):
                sys_totals = literal_eval(line[line.index(':') + 1:].strip())
            elif line.startswith('Dish prices'):
                sys_dish_prices = literal_eval(line[line.index(':') + 1:].strip())
        f.close()
        return {'All orders': sys_orders, 'Order timings': sys_order_timings,
                'Totals': sys_totals, 'Dish prices': sys_dish_prices}
    except Exception as e:
        bot.send_message(admins[0], f'get_orders_vars_from_sys bad\n{e}')


# –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–∫–∞–∑—ã –≤ —Ñ–∞–π–ª
def create_orders_file():
    global menu_date, user_nicknames

    try:
        sys_orders, sys_order_timings, sys_totals, sys_dish_prices = get_orders_vars_from_sys().values()

        # –æ—Ä–º–∏—Ä—É–µ–º —Ñ–∞–π–ª –Ω—É–∂–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        f = open('orders.txt', 'w', encoding='utf-8')
        f.write(f'–ó–∞–∫–∞–∑—ã –Ω–∞ {menu_date}:\n\n')
        for user in sys_orders:
            (order_date, order_time) = sys_order_timings[user]
            f.write(f'–ó–∞–∫–∞–∑ {order_date} {order_time}; {user}\n')
            f.write(f'{user_nicknames[user]}\n')
            for dish, num in sys_orders[user].items():
                f.write(f'{dish};{num};{sys_dish_prices[dish]}\n')
            f.write(f'\n'
                    f'–ò—Ç–æ–≥–æ: {sys_totals[user]}')
            f.write('\n_______________\n\n')
        f.close()
    except Exception as e:
        bot.send_message(admins[0], "create_orders_file doesn't works\n" + str(e))


# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ sys_orders.txt
def create_sys_orders_file():
    global all_orders, order_timings, totals, dish_prices

    try:
        f = open('sys_orders.txt', 'w', encoding='utf-8')
        f.write(f'All orders: {all_orders}\n')
        f.write(f'Order timings: {order_timings}\n')
        f.write(f'Totals: {totals}\n')
        f.write(f'Dish prices: {dish_prices}')
        f.close()
    except Exception as e:
        bot.send_message(admins[0], "create_sys_orders_file doesn't works\n" + str(e))


# –§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"
def create_message_menu():
    global menu, dish_info, dish_prices, menu_date

    try:
        msg = f'–ú–µ–Ω—é –Ω–∞ {menu_date}:'
        msg += '\n'
        for categ in menu:
            msg += f'\n*{categ}*\n'
            for dish, price in menu[categ].items():
                msg += f'{dish} -- {price}\n'
                if dish in dish_info:
                    msg += f'{dish_info[dish]}\n'
        return msg
    except Exception as e:
        bot.send_message(admins[0], f'create_message_menu bad\n{e}')
        return str(menu)


# –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def unknown_user(us_id):
    global bot
    bot.send_message(us_id, '–£–ø—Å, –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
    msg = '–•–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è?\n–ù–∞–∂–º–∏—Ç–µ "–î–∞", —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π' \
          ' id –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–î–∞'))
    markup.add(types.KeyboardButton(text='–ù–µ—Ç'))
    bot.send_message(us_id, msg, reply_markup=markup)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
def authorization_request(message, role='–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', recipient=admins[0]):
    msg = f'–ù–æ–≤—ã–π {role} —Ö–æ—á–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n' \
          f'Name: {message.from_user.first_name} {message.from_user.last_name}\n' \
          f'Username: {message.from_user.username}\n' \
          f'id: {message.chat.id}'
    bot.send_message(recipient, msg)
    msg = f'–ó–∞–ø—Ä–æ—Å –≤ —Ä–æ–ª–∏ {role} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton(text='–ì–æ—Ç–æ–≤–æ'))
    markup.add(types.KeyboardButton(text='–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞'))
    bot.send_message(message.chat.id, msg, reply_markup=markup)


def is_good_time():
    global menu_date_obj, send_time

    send_time_obj = datetime.strptime(send_time, "%H:%M").time()
    delta = menu_date_obj.date() - datetime.now().date()
    if delta.days > 1 or (datetime.now().time() < send_time_obj and delta.days == 1):
        return True
    else:
        return False


def on_delete_order(us_id):
    global totals, all_orders, order_timings

    del all_orders[us_id]
    del totals[us_id]
    del order_timings[us_id]

    create_sys_orders_file()
    create_orders_file()
    bot.send_message(us_id, '–ó–∞–∫–∞–∑ –ø—É—Å—Ç', reply_markup=create_buttons())


@bot.message_handler(commands=['start'])
def start(message):
    global valid_users

    if message.chat.id in valid_users:
        bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, '
                                          f'{message.from_user.first_name}',
                         reply_markup=create_buttons())
    else:
        unknown_user(message.chat.id)


# _________–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop
@bot.message_handler(commands=['stop'])
def stop(message):
    global us_tab_nam  # –ü—Ä–∏—à–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å, —Ç–∫ –≤—ã–±–∞–≤–∞–ª–æ –æ—à–∏–±–∫—É –ø—Ä–∏ users_table_name

    delete(get_connection(), us_tab_nam, f'user_tgid={message.chat.id}')
    bot.send_message(message.chat.id, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö LunchBot')


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç—É–ø–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def bot_message(message):
    global menu, all_orders, totals, dish_prices, valid_users, admins, \
        cooks, menu_date, order_timings

    try:
        update_users()

        if message.chat.id in valid_users and message.chat.id not in cooks:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —Ä–æ–ª—å –Ω–µ –ø–æ–≤–∞—Ä

            if is_good_time():  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                if message.text in menu:
                    bot.send_message(message.chat.id, message.text,
                                     reply_markup=create_buttons(
                                         message_text=message.text))

                elif message.text == '‚óÄ –ù–∞–∑–∞–¥Ô∏è' or message.text == '–ì–æ—Ç–æ–≤–æ':
                    bot.send_message(message.chat.id, message.text,
                                     reply_markup=create_buttons())

                elif message.text.split(':')[0].strip() in dish_prices:
                    dish = message.text.split(':')[0].strip()
                    if message.chat.id in all_orders:
                        if dish in all_orders[message.chat.id]:
                            all_orders[message.chat.id][dish] += 1
                        else:
                            all_orders[message.chat.id].update({dish: 1})
                    else:
                        all_orders.update({message.chat.id: {dish: 1}})
                    bot.send_message(message.chat.id, f'{dish} –¥–æ–±–∞–≤–ª–µ–Ω')
                    bot.send_message(message.chat.id, create_order_msg(message))

                elif message.text.split('x')[0].strip() in dish_prices:
                    dish = message.text.split('x')[0].strip()
                    all_orders[message.chat.id][dish] -= 1

                    if all_orders[message.chat.id][dish] == 0:
                        del all_orders[message.chat.id][dish]

                    if all_orders[message.chat.id] == {}:
                        on_delete_order(message.chat.id)
                    else:
                        bot.send_message(message.chat.id, f'1 {dish} —É–¥–∞–ª–µ–Ω',
                                         reply_markup=create_buttons(
                                             user_id=message.chat.id))
                        bot.send_message(message.chat.id, create_order_msg(message))

                elif message.text == 'üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ':
                    on_delete_order(message.chat.id)

                elif message.text == '‚ùå –†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è':
                    bot.send_message(message.chat.id, '–£–¥–∞–ª–∏—Ç–µ —á—Ç–æ-–ª–∏–±–æ',
                                     reply_markup=create_buttons(
                                         user_id=message.chat.id))

                elif message.text == '‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑':
                    if message.chat.id in all_orders:
                        order_time = datetime.today().time().isoformat(
                            timespec='seconds')
                        order_date = datetime.today().date().isoformat()
                        order_date = datetime.strptime(order_date, '%Y-%m-%d').strftime('%Y.%m.%d')
                        order_timings.update({message.chat.id: (order_date, order_time)})

                        create_sys_orders_file()
                        create_orders_file()
                        bot.send_message(message.chat.id, '–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!')
                    else:
                        bot.send_message(message.chat.id, '–í–∞—à –∑–∞–∫–∞–∑ –ø—É—Å—Ç')

                elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é':
                    bot.send_message(message.chat.id, create_message_menu(), parse_mode='Markdown')

                else:
                    bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫', reply_markup=create_buttons())
            else:
                bot.send_message(message.chat.id, '–í –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è')

        else:  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏/–∏–ª–∏  —É –Ω–µ–≥–æ —Ä–æ–ª—å –ø–æ–≤–∞—Ä–∞
            if message.text == '–î–∞' or message.text == '–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞':
                authorization_request(message)
            elif message.text == '–ì–æ—Ç–æ–≤–æ' and message.chat.id not in cooks:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(types.KeyboardButton(text='–ì–æ—Ç–æ–≤–æ'))
                markup.add(types.KeyboardButton(text='–ì–æ—Ç–æ–≤–æ'))
                bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ',
                                 reply_markup=markup)
            elif message.chat.id in cooks:
                bot.send_message(message.chat.id, '–í—ã –ø–æ–≤–∞—Ä, –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å'
                                                  ' —Ñ–∞–π–ª —Å –º–µ–Ω—é',
                                 reply_markup=types.ReplyKeyboardRemove())
            elif message.text == cook_pass and message.chat.id not in cooks:
                authorization_request(message, '–ø–æ–≤–∞—Ä')
            elif message.text == admin_pass and message.chat.id not in admins:
                authorization_request(message, '–∞–¥–º–∏–Ω')
            else:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞—Ä–æ–ª–∏
                unknown_user(message.chat.id)

    except Exception as e:
        bot.send_message(admins[0], str(e))


# ____________–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤_________
# –ü–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–Ω—é
@bot.message_handler(content_types=['document'])
def download_menu_file(message):
    if message.chat.id in admins or message.chat.id in cooks:
        fname = 'menu.txt'
        if message.document.file_name == fname:
            # try parse file
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            with open(fname, 'wb') as new_file:
                new_file.write(downloaded_file)
            new_file.close()
            # send_orders_file()
            init_menu()
            if message.chat.id in admins:
                bot.send_message(message.chat.id, '–ú–µ–Ω—é –ø—Ä–∏–Ω—è—Ç–æ', reply_markup=create_buttons())
            else:
                bot.send_message(message.chat.id, '–ú–µ–Ω—é –ø—Ä–∏–Ω—è—Ç–æ')
    else:
        bot.send_message(message.chat.id, '–§–∞–π–ª —Å –º–µ–Ω—é –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–≤–∞—Ä–∞ –∏ –∞–¥–º–∏–Ω—ã')
